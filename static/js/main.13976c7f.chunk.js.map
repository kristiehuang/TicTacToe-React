{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","playerMark","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","currentStep","slice","calculateWinner","setState","concat","oldMove","current","console","log","winner","status","moves","map","step","move","description","key","jumpTo","handleClick","lines","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iPAMA,SAASA,EAAOC,GACZ,OACI,4BACIC,UAAU,SACVC,QAASF,EAAME,SAEdF,EAAMG,Y,IAObC,E,2KAEWC,GAAI,IAAD,OACZ,OAAO,kBAACN,EAAD,CACHI,WAAYG,KAAKN,MAAMO,QAAQF,GAC/BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAKtC,OACI,6BACI,yBAAKJ,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GAzBnBC,IAAMC,WAgCpBC,E,kDAEF,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,QAAS,CAAC,CACNN,QAASO,MAAM,GAAGC,KAAK,QAE3BC,SAAS,EACTC,YAAa,GAPF,E,wDAWPZ,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMK,YAAc,GAI/DV,EAFUM,EAAQP,KAAKM,MAAMK,aAEXV,QAAQW,QAC5BC,EAAgBZ,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMI,QAAU,IAAM,IACxCV,KAAKc,SAAS,CACVP,QAASA,EAAQQ,OAAO,CAAC,CACrBd,QAASA,KAEbS,SAAUV,KAAKM,MAAMI,QACrBC,YAAaX,KAAKM,MAAMK,YAAc,O,6BAMvCK,GACHhB,KAAKc,SAAS,CACVJ,QAAUM,EAAU,GAAK,EACzBL,YAAaK,M,+BAIX,IAAD,OACCT,EAAUP,KAAKM,MAAMC,QACrBU,EAAUV,EAAQP,KAAKM,MAAMK,aACnCO,QAAQC,IAAIF,GACZ,IAAMG,EAASP,EAAgBI,EAAQhB,SACjCoB,EAASD,EACT,aAAeA,EACf,iBAAmBpB,KAAKM,MAAMI,QAAU,IAAM,KAC9CY,EAAQf,EAAQgB,KAAI,SAACC,EAAMC,GAC7BP,QAAQC,IAAIK,EAAMC,GAClB,IAAMC,EAAcD,EAChB,eAAiBA,EACjB,mBACJ,OACI,wBAAIE,IAAKF,GACL,4BAAQ7B,QAAS,kBAAM,EAAKgC,OAAOH,KAAQC,OAGpDd,MAAM,EAAGZ,KAAKM,MAAMK,YAAc,GAErC,OAEI,yBAAKhB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACG,EAAD,CACIG,QAASgB,EAAQhB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK8B,YAAY9B,OAGzC,yBAAKJ,UAAU,aACX,yBAAKA,UAAU,UAAU0B,GACzB,4BAAKC,S,GAxENnB,IAAMC,WAsFzB,SAASS,EAAgBZ,GAWrB,IAVA,IAAM6B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF/B,EAAI,EAAGA,EAAI+B,EAAMC,OAAQhC,IAAK,CAAC,IAAD,cACjB+B,EAAM/B,GADW,GAC5BiC,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIjC,EAAQ+B,IAAM/B,EAAQ+B,KAAO/B,EAAQgC,IAAMhC,EAAQ+B,KAAO/B,EAAQiC,GAClE,OAAOjC,EAAQ+B,GAGvB,OAAO,KAtBXG,IAASC,OACL,kBAAC/B,EAAD,MACAgC,SAASC,eAAe,W","file":"static/js/main.13976c7f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//props: playerMark, onClick\n//Function Components - simpler way to write components that only contain render method & dont have state\nfunction Square(props) {\n    return (\n        <button\n            className=\"square\"\n            onClick={props.onClick} //when you call setState, will auto-render / update child components\n        >\n            {props.playerMark}\n        </button>\n    );\n}\n\n\n//props: squares, onClick\nclass Board extends React.Component {\n\n    renderSquare(i) {\n        return <Square\n            playerMark={this.props.squares[i]}\n            onClick={() => this.props.onClick(i)}\n        />;\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null)\n            }],\n            xIsNext: true,\n            currentStep: 0,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.currentStep + 1);\n\n        const current = history[this.state.currentStep];\n    \n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            xIsNext: !this.state.xIsNext,\n            currentStep: this.state.currentStep + 1,\n        });\n\n        \n    }\n\n    jumpTo(oldMove) {\n        this.setState({\n            xIsNext: (oldMove % 2 == 0),\n            currentStep: oldMove,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.currentStep];\n        console.log(current);\n        const winner = calculateWinner(current.squares);\n        const status = winner\n            ? 'Winner is ' + winner\n            : 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'); \n        const moves = history.map((step, move) => {\n            console.log(step, move);\n            const description = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{description}</button>\n                </li>\n            );\n        }).slice(0, this.state.currentStep + 1);\n\n        return (\n            \n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div className=\"status\">{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}"],"sourceRoot":""}